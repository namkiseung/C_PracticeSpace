#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>
#define BUFF_SIZE 1024

int main(int argc, char **argv){
    
    pid_t pid;
    int server_socket;
    int client_socket[10];
    int client_addr_size;
    struct sockaddr_in server_addr;
    struct sockaddr_in client_addr;
    char buff_rcv[BUFF_SIZE+5];
    char buff_snd[BUFF_SIZE+5];
    char buff[BUFF_SIZE+5];
    char str[1024];
    char *fin = "done";
    int count;

    server_socket = socket(PF_INET , SOCK_STREAM, 0);
    memset( &server_addr ,0 ,sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(2202);
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    if( -1 == bind(server_socket ,(struct sockaddr*)&server_addr ,sizeof(server_addr))){
	printf("bind ¿¡·¯\n");

    }
    listen(server_socket ,5);

    count = 0;

    client_addr_size = sizeof(client_addr);
    
    client_socket[count] = accept(server_socket ,(struct sockaddr*)&client_addr , &client_addr_size);

    //sprintf(buff_snd, "%d :  %d" , count , client_socket[count]);   
    //write(client_socket[count] , buff_snd ,1024);

    count = count +1;
   
    pid = fork();
    
    if(pid>0){
		FILE *f;
		f=fopen("/var/www/processlist.php","w");
	while(1){

		read(client_socket[count-1] ,buff_rcv , BUFF_SIZE);
		
		sprintf(buff_snd , "%d : %s" , strlen(buff_rcv) ,buff_rcv);
		printf("receive: %s\n" , buff_rcv);

		

		if(!strcmp(buff_rcv,fin)){
		  break;
		}
		else{
		  //sprintf(str,"echo %s >> /var/www/processlist.php", buff_rcv);
		  //system(str);

		  //FILE *fp_sour;
		  //FILE *fp_dest;
		  //char *buf;
		  //int buf_size;

		  //buf_size = 1024;

		  //if(fp_dest = fopen("/var/www/processlist.php","w")){
		  //  buf = malloc(buf_size+5);
		  //  while(fgets(buf,buf_size, fp_dest))
			//fputs(buf,fp_dest);
			//free(buf);
			//fclose(fp_dest);
		  //}
			
			fprintf(f,"%s\n",buff_rcv);
		}
		

	}
		fclose(f);
	    	close(client_socket[count-1]);
	
    }
    

    
}
